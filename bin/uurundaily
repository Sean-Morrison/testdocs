#!/usr/bin/env python3
from boss_drp.run.uurundaily import uurundaily, parseNumList
from boss_drp import config, config_to_args

import argparse
import os.path as ptt
import sys
import os


if __name__ == '__main__' :
    """
    Batch process Spectro-2D and Spectro-1D reductions
    """
    parser = argparse.ArgumentParser(
            prog=ptt.basename(sys.argv[0]),
            description='Process the BOSS data for a single MJD end-to-end (including plan files)')
    
    parser.add_argument('--apo', action = 'store_true')
    parser.add_argument('--lco', action = 'store_true')
    parser.add_argument('--module', type=str, help='Module for daily run', default='bhm/master')
    parser.add_argument('--mjd', type=int, help='Manually run for a single/list of mjd (does not update nextmjd.par)', nargs='*')
    parser.add_argument('--range_mjd', type=parseNumList, help='Manually run for a range of mjds (does not update nextmjd.par)')
    parser.add_argument('--clobber', action='store_true', help="clobber uubatchpbs run")
    parser.add_argument('--fast', action='store_true', help='turn on fast user for slurm')
    parser.add_argument('--saveraw', action='store_true', help='save sdssproc outputs')
    parser.add_argument('--debug', action='store_true', help='save extraction debug files')
    parser.add_argument('--skip_plan', action='store_true', help='Skip  createing spplan files')
    parser.add_argument('--nosubmit', action='store_true', help='Skip submitting uubatch job (ideal for allowing editting of plans)')
    parser.add_argument('--noslurm', action='store_true', help='Skip creating uubatch job')
    parser.add_argument('--batch', action='store_true', help='run for multiple mjds in a single batch')
    parser.add_argument('--nodb', action='store_true', help='skip Database operations')
    parser.add_argument('--epoch', action='store_true', help='Run Epoch Coadds')
    parser.add_argument('--summary', action='store_true', help='Build Summary Files')
    parser.add_argument('--monitor', action='store_true', help='Monitors pipeline status')
    parser.add_argument('--pause', type=int, help='Pause time (s) in status updates', default=15*60)
    parser.add_argument('--merge3d', action='store_true', help='Use prototype 3D Dustmap (in merge mode)')
    parser.add_argument('--traceflat', action='store_true', help='Build and use TraceFlats')
    parser.add_argument('--no_prep', action='store_true', help='Skip building TraceFlats and spfibermaps before pipeline run')
    parser.add_argument('--no_dither', action='store_true', help='Skip Dither Engineering Fields')
    parser.add_argument('--no_dither', action='store_true', help='Skip Dither Engineering Fields')
    parser.add_argument('--walltime', help='Wall time in hours', type=str)
    parser.add_argument('--mem_per_cpu', help='Memory allocated per CPU', type=str)

    args = parser.parse_args()
            
    args, config = config_to_args(config, args, ['uurundaily'], slurm=True, update_config = True)

    if args.lco is True:
        args.obs = ['lco']
    if args.apo is True:
        args.obs = ['apo']
    if args.range_mjd is not None:
        if args.mjd is not None:
            args.mjd.extend(args.range_mjd)
        else:
            args.mjd = args.range_mjd

    if args.module is None:
        args.module = os.getenv('MODULE', default=None)
        if args.module is None:
            args.module = os.getenv('RUN2D', default=None)

    

    uurundaily(args.module, args.obs, mjd=args.mjd, clobber=args.clobber, fast = args.fast, saveraw=args.saveraw, skip_plan=args.skip_plan,
            nosubmit=args.nosubmit, batch=args.batch, noslurm=args.noslurm, debug=args.debug, nodb= args.nodb, epoch = args.epoch,
            build_summary = args.summary, pause = args.pause, monitor=args.monitor, merge3d=args.merge3d, no_dither=args.no_dither,
            from_domain="chpc.utah.edu", traceflat = args.traceflat, king = args.king, no_prep = args.no_prep, config=config,
            walltime=args.walltime, mem_per_cpu = args.mem_per_cpu)
